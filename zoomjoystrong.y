
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "zoomjoystrong.tab.h"
#include "zoomjoystrong.h"



/* Prototype for the lexer generated by Flex */
int yylex(void);
void yyerror(const char *s);


%}


/* Data type for semantic values */
%union {
    int ival;
    double fval;
    char *sval;
}

/* Token declarations (from Flex) */
%token <ival> INT 
%token <fval> FLOAT
%token <sval> VARIABLE
%token PLUS MINUS MULT DIV EQUALS
%token POINT LINE CIRCLE RECTANGLE SET_COLOR END END_STATEMENT

%type <ival> expr draw term

%%
/* The list of statements followed by "end" */
input:
    statement_list END
    |
;

/* A list statments or just one statement */
statement_list:
    statement_list statement
    | statement
;

/* A statemtn is a draw command or and expression command followed by a ";" */
statement:
    draw END_STATEMENT
    | expr END_STATEMENT
;

/* Defines mathmatical operations */
expr:
    term EQUALS term  {$$ = $3;}
    | term PLUS term  {$$ = $1 + $3;}
    | term MINUS term {$$ = $1 - $3;}
    | term MULT term  {$$ = $1 * $3;}
    | term DIV term { 
        if ($3 == 0) {
            yyerror("Division by zero!");
            $$ = 0;
        } else{ 
            $$ = $1 / $3;
        } 
      }
;

/* Defines all the drawing syntax */
draw:
    POINT term term              {point($2, $3);}
    | LINE term term term term   {line($2, $3, $4, $5);}
    | CIRCLE term term term      {circle($2, $3, $4);}
    | RECTANGLE term term term term {rectangle($2, $3, $4, $5);}

/* Defines ints, floats, and variables */
term:
    INT        {$$ = $1;}
    | FLOAT    {$$ = $1;}
    | VARIABLE {$$ = 0;}


%%

int main() {
    printf("Enter commands:\n");
    yyparse();
    return 0;
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}